using GAXT.NET;
using static GAXT.NET.СредаВыполнения;

var приветМирДлинный = $@"72_$~
J1+$~
10_8_$~
10_8_$~
11_1_$~
44_$~
32_$~
11_9_$~
11_1_$~
11_4_$~
10_8_$~
J$~
33_$~!
";
var приветМирДельта = $@"G2+$
C+1-$
7+$$
3+$
G-3+$
A-2-$
JB+1-$
8-$
3+$
6-$
8-$
F-7-$~!
";
var программаСУсловиями = $@"12>
{{
    42+
    |
    56=
    {{
        3?
        |
        47<
        {{
            4?
            |
            7?
        }}
    }}
}}!
";
var программаСМакросами = $@"
(a0:b0:)            обнулить а и б
(#?~#)              напечатать значение вершины другого стека
(C2+$~)             напечатать пробел
($~ 2@ F1+$~ 2@)    напечатать символ и пробел  и равно и пробел


a3:                 а равно трём
I7+ 3@ a1@ 2@       напечатать а равно и его значение и пробел

b5:                 б равно пяти
I8+ 3@ b1@          напечатать б равно и его значение

0@                  очистить а и б
A$                  напечатать перевод строки

I7+ 3@ a1@ 2@       напечатать а равно и его значение и пробел
I8+ 3@ b1@          напечатать б равно и его значение
!                   финиш
";
var программаСЦиклами = $@"
An: 0x: 1y: 0z: 0i: #
[
  x? # C2+$
  1x: 1y: # +z: #
  1y: # x: # 1z: # y: #
  11i:+ #i: #
  in<
]!

";
var программа99бутылокСПивом = $@"
(
    9@
    H3+-$
    H1-+$ 9-$
    G-$
    F6++$ 3+$$ A3++$%
)

(
    C2+$
    G9++$ 1-$
    G8+-$
    H4++$ A2+-$ 3-$
    G1--$
    H7++$ B2+-$ A1++$$%
)

(
    H4+$ A3++$ A+$ 6-$
    F9+-$
    G9++$ 1-$ 9-$
    F9+-$
    F8++$ A1++$ 8+$ 9-$
    G8+-$
    F5++$ A3++$ A-$
    F8+-$
    H+$ A5+-$ A8++$$
    H3+-$
    G3++$ A1++$
    H4+-$
    F5++$ A7++$ 3-$ 6+$ 7-$ A-$
    E6+-$ A2+-$%
)

(
    I8+$ A3++$ 5+$$ 8-$ 7-$
    F9+-$
    G9++$ 9-$
    G-$
    F6++$ 3+$$ A3++$%
)

(0@1@)
(#ba+?ba-%#)
(D4+$ A2+-$%)
(D9+$ A7+-$%)
(D6+$C6+-$%)

(
    C2+$
    F6++$ A3++$ 5+$$ 8-$ 7-$ A4++$
)

(
    5@4@6@5@0@ 8@
    2@#b?#4@8@ #ba-#
)

(
    JA+$ 1+$
    G9+-$
    G7++$ 2+$ 3+$ A3+-$%
)

98_b: a1:
b#[#A@#]#

7@3@1@6@7@3@8@
2@A1+@4@!
";

var программа = приветМирДлинный;
var лексер = new ЛексерГакст(программа.ToString());
var парсер = new ПарсерГакст(лексер);
var результатРазбора = парсер.ParseProgram();
if (результатРазбора.IsError)
{
    Console.WriteLine($"ошибка разбора программы. Получили {результатРазбора.Error.Got} на строке и столбце {результатРазбора.Error.Position}");
    return;
}

УстановитьУстройствоВывода(Console.Out);
ВыполнитьБлок(результатРазбора.Ok.Value);

void ВыполнитьБлок(Блок блокКода)
{
    foreach (var выражение in блокКода.Выражения)
    {
        ВыполнитьВыражение(выражение);
    }
}

void ВыполнитьВыражение(Выражение выражение)
{
    switch (выражение)
    {
        case ПростойКод блокКода:
            foreach (char команда in блокКода.код)
            {
                ВыполнитьКоманду(команда);
            }
            break;
        case Блок блокКода:
            ВыполнитьБлок(блокКода);
            break;
        case Условие условие:
            var условиеВыбора = Посмотреть();
            if (условиеВыбора != 0)
            {
                ВыполнитьВыражение(условие.thenExpression);
            }
            else
            {
                ВыполнитьВыражение(условие.elseExpression);
            }
            break;
        case Макрос блокКода:
            ЗарегистрироватьМакрос(() => ВыполнитьВыражение(блокКода.Тело));
            break;
        case Цикл блокКода:
            do
            {
                ВыполнитьВыражение(блокКода.Тело);
                var условиеВыходаИзЦикла = Посмотреть();
                if (условиеВыходаИзЦикла != 0) break;
            }
            while (true);
            break;
        default:
            throw new InvalidOperationException("Неизвестное выражение");
    };
}

void ВыполнитьКоманду(char команда)
{
    if (команда is >= 'A' and <= 'Z')
    {
        ПоложитьВСтек(ПолучитьКонстантноеЗначение(команда));
    }
    else if (команда is >= 'a' and <= 'z')
    {
        ПоложитьПеременную(команда - 'a');
    }
    else if (команда is >= '0' and <= '9')
    {
        ПоложитьВСтек(команда - '0');
    }
    else if (команда == '+')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var значение = оп1 + оп2;
        ПоложитьВСтек(значение);
    }
    else if (команда == '-')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var значение = оп1 - оп2;
        ПоложитьВСтек(значение);
    }
    else if (команда == '*')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var значение = оп1 * оп2;
        ПоложитьВСтек(значение);
    }
    else if (команда == '/')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var значение = оп1 / оп2;
        ПоложитьВСтек(значение);
    }
    else if (команда == '<')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var значение = оп1 < оп2 ? 1 : 0;
        ПоложитьВСтек(значение);
    }
    else if (команда == '>')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var значение = оп1 > оп2 ? 1 : 0;
        ПоложитьВСтек(значение);
    }
    else if (команда == '=')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var значение = оп1 == оп2 ? 1 : 0;
        ПоложитьВСтек(значение);
    }
    else if (команда == '_')
    {
        var оп2 = СнятьСоСтека();
        var оп1 = СнятьСоСтека();
        var sign1 = Math.Abs(оп1) == оп1 ? 1 : -1;
        var sign2 = Math.Abs(оп2) == оп2 ? 1 : -1;
        var значение = sign1 * sign2 * long.Parse(Math.Abs(оп1).ToString() + Math.Abs(оп2).ToString());
        ПоложитьВСтек(значение);
    }
    else if (команда == '$')
    {
        var оп1 = Посмотреть();
        ВывестиСимвол(оп1);
    }
    else if (команда == '?')
    {
        var оп1 = Посмотреть();
        ВывестиЧисло(оп1);
    }
    else if (команда == '~')
    {
        _ = СнятьСоСтека();
    }
    else if (команда == '%')
    {
        ОчиститьСтек();
    }
    else if (команда == ':')
    {
        var значение = СнятьСоСтека();
        СохранитьПеременную(значение);
    }
    else if (команда == '#')
    {
        ПереключитьТекущийСтек();
    }
    else if (команда == '@')
    {
        var кодМакроса = СнятьСоСтека();
        var макрос = ПолучитьМакрос(кодМакроса);
        макрос();
    }
    else if (char.IsWhiteSpace(команда))
    {
        // ничего не делаем.
    }
    else
    {
        // ничего не делаем.
    }
}

long ПолучитьКонстантноеЗначение(char константа)
{
    return константа switch
    {
        'A' => 10,
        'B' => 20,
        'C' => 30,
        'D' => 40,
        'E' => 50,
        'F' => 60,
        'G' => 70,
        'H' => 80,
        'I' => 90,
        'J' => 100,
        'K' => 200,
        'L' => 300,
        'M' => 400,
        'N' => 500,
        'O' => 600,
        'P' => 700,
        'Q' => 800,
        'R' => 900,
        'S' => 1000,
        'T' => 2000,
        'U' => 3000,
        'V' => 4000,
        'W' => 5000,
        'X' => 6000,
        'Y' => 7000,
        'Z' => 8000,
        _ => throw new InvalidOperationException()
    };
}