using Mono.Cecil;
using Mono.Cecil.Cil;

namespace GAXT.NET;

internal class Транспилятор
{
    private readonly string имя;
    int счетчикМакросов;
    private TextWriter писатель = Console.Out;

    public static void Транспилировать(string имя, string программа)
    {
        var к = new Транспилятор(имя);
        к.Транспилировать(программа);
    }

    public Транспилятор(string имя)
    {
        this.имя = имя;
    }

    public void Транспилировать(string программа)
    {
        var лексер = new ЛексерГакст(программа);
        var парсер = new ПарсерГакст(лексер);
        var результатРазбора = парсер.ParseПрограмма();
        if (результатРазбора.IsError)
        {
            Console.WriteLine($"ошибка разбора программы. Получили {результатРазбора.Error.Got} на строке и столбце {результатРазбора.Error.Position}");
            return;
        }

        писатель.WriteLine("""
            using static GAXT.NET.СредаВыполнения;
            
            """);
        писатель.WriteLine($"class {this.имя}");
        писатель.WriteLine("""
            {
            public static void Main()
            {
            """);
        ТранспилироватьБлок(результатРазбора.Ok.Value);

        писатель.WriteLine("""
            }
            """);

        писатель.WriteLine("""
            Action ПолучитьМакрос(int кодМакроса)
            {
            """);
        for (int i = 0;i < счетчикМакросов;i++)
        {
            писатель.WriteLine($"if (кодМакроса == {i}) return Макрос_{i};");
        }

        писатель.WriteLine("""
                throw new NotImplementedException();
            }
            """);

        писатель.WriteLine("""
            } // end class
            """);
    }

    void ТранспилироватьБлок(Блок блокКода)
    {
        foreach (var выражение in блокКода.Выражения)
        {
            ТранспилироватьВыражение(выражение);
        }
    }

    void ТранспилироватьВыражение(Выражение выражение)
    {
        switch (выражение)
        {
            case ПростойКод блокКода:
                foreach (char команда in блокКода.Код)
                {
                    ТранспилироватьКоманду(команда);
                }
                break;
            case Блок блокКода:
                ТранспилироватьБлок(блокКода);
                break;
            case УсловноеВыражение условие:
                {
                    писатель.WriteLine("""
                        {
                        var условиеВыбора = Посмотреть();
                        if (условиеВыбора != 0)
                        {
                    """);
                    ТранспилироватьВыражение(условие.ИстинноеВыражение);
                    писатель.WriteLine("""
                        }
                        else
                        {
                    """);
                    ТранспилироватьВыражение(условие.ЛожноеВыражение);
                    писатель.WriteLine("""
                        }
                        }
                    """);
                }
                break;
            case Макрос блокКода:
                {
                    писатель.WriteLine($"public static void Макрос_{счетчикМакросов}()");
                    писатель.WriteLine("""
            {{
            """);
                    ТранспилироватьВыражение(блокКода.Тело);
                    писатель.WriteLine("""
            }
            """);
                    счетчикМакросов++;
                }
                break;
            case ЗацикленноеВыражение блокКода:
                {
                    писатель.WriteLine("""
                    do
                    {
                    """);
                    ТранспилироватьВыражение(блокКода.Тело);
                    писатель.WriteLine("""
                        var условиеВыходаИзЦикла = ТранслироватьПеременную(Посмотреть());
                        if (условиеВыходаИзЦикла == 0) break;
                    }
                    while (true);
                    """);
                }
                break;
            default:
                throw new InvalidOperationException("Неизвестное выражение");
        };
    }

    void ТранспилироватьКоманду(char команда)
    {
        if (команда is >= 'A' and <= 'Z')
        {
            var значение = ПолучитьКонстантноеЗначение(команда);
            писатель.WriteLine($"    ПоложитьВСтек({значение});");
        }
        else if (команда is >= 'a' and <= 'z')
        {
            писатель.WriteLine($"    ПоложитьПеременную('{команда}');");
        }
        else if (команда is >= '0' and <= '9')
        {
            var значение = команда - '0';
            писатель.WriteLine($"    ПоложитьВСтек({значение});");
        }
        else if (команда == '+' || команда == '-' || команда == '*' || команда == '/')
        {
            писатель.WriteLine("""
                {
                var оп2 = СнятьСоСтека();
                var оп1 = Посмотреть();
            """);
            писатель.WriteLine($"    var значение = ТранслироватьПеременную(оп1) {команда} ТранслироватьПеременную(оп2);");
            писатель.WriteLine("""
                СохранитьПеременную(значение);
                }
            """);
        }
        else if (команда == '<' || команда == '>' || команда == '=')
        {

            писатель.WriteLine("""
                {
                var оп2 = СнятьСоСтека();
                var оп1 = Посмотреть();
            """);
            писатель.WriteLine($"    var значение = ТранслироватьПеременную(оп1) {команда} ТранслироватьПеременную(оп2) ? 1 : 0;");
            писатель.WriteLine("""
                СохранитьПеременную(значение);
                }
            """);
        }
        else if (команда == '$')
        {
            писатель.WriteLine("""
                {
                var оп1 = Посмотреть();
                ВывестиСимвол(ТранслироватьПеременную(оп1));
                }
            """);
        }
        else if (команда == '?')
        {
            писатель.WriteLine("""
                {
                var оп1 = Посмотреть();
                ВывестиЧисло(ТранслироватьПеременную(оп1));
                }
            """);
        }
        else if (команда == '_')
        {
            писатель.WriteLine("""
                {
                var оп2 = СнятьСоСтека();
                var оп1 = Посмотреть();
                var топ1 = ТранслироватьПеременную(оп1);
                var топ2 = ТранслироватьПеременную(оп2);
                var значение = СклеитьЗначения(топ1, топ2);
                СохранитьПеременную(значение);
                }
            """);
        }
        else if (команда == '~')
        {
            писатель.WriteLine("""
                _ = СнятьСоСтека();
            """);
        }
        else if (команда == '%')
        {
            писатель.WriteLine("""
                ОчиститьСтек();
            """);
        }
        else if (команда == ':')
        {
            писатель.WriteLine("""
                {
                var значение = СнятьСоСтека();
                ПереключитьТекущийСтек();
                СохранитьПеременную(значение);
                ПереключитьТекущийСтек();
                }
            """);
        }
        else if (команда == '#')
        {
            писатель.WriteLine("""
                ПереключитьТекущийСтек();
            """);
        }
        else if (команда == '@')
        {
            писатель.WriteLine("""
                {
                var кодМакроса = СнятьСоСтека();
                var макрос = ПолучитьМакрос(кодМакроса);
                макрос();
                }
            """);
        }
        else if (char.IsWhiteSpace(команда))
        {
            // ничего не делаем.
        }
        else
        {
            // ничего не делаем.
        }
    }

    static long ПолучитьКонстантноеЗначение(char константа)
    {
        return константа switch
        {
            'A' => 10,
            'B' => 20,
            'C' => 30,
            'D' => 40,
            'E' => 50,
            'F' => 60,
            'G' => 70,
            'H' => 80,
            'I' => 90,
            'J' => 100,
            'K' => 200,
            'L' => 300,
            'M' => 400,
            'N' => 500,
            'O' => 600,
            'P' => 700,
            'Q' => 800,
            'R' => 900,
            'S' => 1000,
            'T' => 2000,
            'U' => 3000,
            'V' => 4000,
            'W' => 5000,
            'X' => 6000,
            'Y' => 7000,
            'Z' => 8000,
            _ => throw new InvalidOperationException()
        };
    }
}
