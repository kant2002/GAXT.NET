namespace GAXT.NET;

using Yoakke.SynKit.Parser.Attributes;

using ТокенаГакст = Yoakke.SynKit.Lexer.IToken<ТипТокенаГакст>;

[Parser(typeof(ТипТокенаГакст))]
internal partial class ПарсерГакст
{
    [Rule($"ПростойКод : Операция+")]
    private static ПростойКод СделатьПростойКод(IReadOnlyList<ТокенаГакст> команды)
    {
        return new ПростойКод(string.Join("", команды.Select(_ => _.Text)));
    }

    [Rule($"СохранениеМакроса : '(' Блок ')'")]
    private static Макрос СделатьСохранениеМакроса(ТокенаГакст _, Выражение тело, ТокенаГакст __)
    {
        return new Макрос(тело);
    }

    [Rule($"ЗацикленноеВыражение : '[' Блок ']'")]
    private static ЗацикленноеВыражение СделатьЗацикленноеВыражение(ТокенаГакст _, Выражение тело, ТокенаГакст __)
    {
        return new ЗацикленноеВыражение(тело);
    }

    [Rule($"УсловноеВыражение : '{{' Блок '|' Блок '}}'")]
    private static УсловноеВыражение СделатьУсловноеВыражение(ТокенаГакст _, Выражение истинноеВыражение, ТокенаГакст __, Выражение ложноеВыражение, ТокенаГакст ___)
    {
        return new УсловноеВыражение(истинноеВыражение, ложноеВыражение);
    }

    [Rule($"Выражение : СохранениеМакроса")]
    [Rule($"Выражение : УсловноеВыражение")]
    [Rule($"Выражение : ЗацикленноеВыражение")]
    [Rule($"Выражение : ПростойКод")]
    private static Выражение СделатьВыражение(Выражение выражение)
    {
        return выражение;
    }

    [Rule($"Блок : Выражение*")]
    private static Блок СделатьБлок(IReadOnlyList<Выражение> выражения)
    {
        return new Блок(выражения);
    }

    [Rule($"Программа : Блок '!'")]
    private static Блок СделатьПрограмму(Блок тело, ТокенаГакст _)
    {
        return тело;
    }
}

abstract record Выражение;
record ПростойКод(string Код) : Выражение;
record Блок(IReadOnlyList<Выражение> Выражения) : Выражение;
record Макрос(Выражение Тело) : Выражение;
record УсловноеВыражение(Выражение ИстинноеВыражение, Выражение ЛожноеВыражение) : Выражение;
record ЗацикленноеВыражение(Выражение Тело) : Выражение;